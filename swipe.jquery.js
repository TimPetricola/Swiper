// Generated by CoffeeScript 1.4.0
/*
jQuery Swipe Plugin

Based on Swipe 1.0 by Brad Birdsall
*/

var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

(function($, window) {
  var Swiper, _defaults;
  _defaults = {
    debug: false,
    start: 0,
    speed: 300,
    auto: 0,
    previewWidth: 0,
    interspace: 0,
    callback: function() {}
  };
  $.fn.setTransitionDuration = function(duration) {
    return $(this).css({
      webkitTransitionDuration: "" + duration + "ms",
      MozTransitionDuration: "" + duration + "ms",
      msTransitionDuration: "" + duration + "ms",
      OTransitionDuration: "" + duration + "ms",
      transitionDuration: "" + duration + "ms"
    });
  };
  $.fn.setTranslateX = function(translation) {
    var style;
    style = $(this).get(0).style;
    style.MozTransform = style.webkitTransform = 'translate3d(' + translation + 'px,0,0)';
    return style.msTransform = style.OTransform = 'translateX(' + translation + 'px)';
  };
  Swiper = (function() {

    function Swiper(el, options) {
      var _this = this;
      this.options = $.extend({}, _defaults, options);
      this.index = this.options.start;
      this.delay = this.options.auto;
      this.$container = $(el);
      this.$el = this.$container.children();
      this.$container.css({
        overflow: 'hidden',
        listStyle: 'none',
        margin: 0
      });
      this._init();
      this._start();
      this.$el.on({
        'touchstart': function(e) {
          return _this._onTouchStart.call(_this, e);
        },
        'touchmove': function(e) {
          return _this._onTouchMove.call(_this, e);
        },
        'touchend': function(e) {
          return _this._onTouchEnd.call(_this, e);
        },
        'webkitTransitionEnd': function(e) {
          return _this._transitionEnd.call(_this, e);
        },
        'msTransitionEnd': function(e) {
          return _this._transitionEnd.call(_this, e);
        },
        'oTransitionEnd': function(e) {
          return _this._transitionEnd.call(_this, e);
        },
        'transitionend': function(e) {
          return _this._transitionEnd.call(_this, e);
        }
      });
      $(window).on('resize', function() {
        return _this._init.call(_this);
      });
      this;

    }

    Swiper.prototype._init = function() {
      var container;
      this.$slides = this.$el.children();
      if (!(this.$slides.length > 1)) {
        return;
      }
      container = this.$container.get(0);
      this.width = __indexOf.call(container, 'getBoundingClientRect') >= 0 ? container.getBoundingClientRect().width : container.offsetWidth;
      this.width = this.width - 2 * this.options.previewWidth;
      this.width = Math.ceil(this.width);
      this.innerWidth = this.width - this.options.interspace;
      if (!this.width) {
        return;
      }
      this.$container.css('visibility', 'hidden');
      this.$el.width(Math.ceil(this.$slides.length * this.width));
      this.$slides.css({
        width: this.innerWidth,
        marginLeft: this.options.interspace / 2,
        marginRight: this.options.interspace / 2,
        display: 'inline-block',
        verticalAlign: 'top'
      });
      this.slide(this.index, 0);
      return this.$container.css('visibility', 'visible');
    };

    Swiper.prototype.slide = function(index, duration) {
      if (duration == null) {
        duration = this.options.speed;
      }
      this.translation = this.options.previewWidth - index * this.width;
      this.$el.setTranslateX(this.translation);
      this.$el.setTransitionDuration(duration);
      return this.index = index;
    };

    Swiper.prototype._start = function() {
      var _this = this;
      return this.interval = this.delay ? setTimeout((function() {
        return _this.next(_this.delay);
      }), this.delay) : 0;
    };

    Swiper.prototype._transitionEnd = function(e) {
      if (this.delay) {
        this._start();
      }
      return this.options.callback.call(this.$container, this.index, this.$slides.eq(this.index));
    };

    Swiper.prototype._onTouchStart = function(e) {
      e = e.originalEvent;
      this.start = {
        pageX: e.touches[0].pageX,
        pageY: e.touches[0].pageY,
        time: Number(new Date())
      };
      this.isScrolling = void 0;
      this.deltaX = 0;
      this.$el.setTransitionDuration(0);
      return e.stopPropagation();
    };

    Swiper.prototype._onTouchMove = function(e) {
      var condition, div;
      e = e.originalEvent;
      if (e.touches.length > 1 || e.scale && e.scale !== 1) {
        return;
      }
      this.deltaX = e.touches[0].pageX - this.start.pageX;
      if (typeof this.isScrolling === 'undefined') {
        this.isScrolling = !!(this.isScrolling || Math.abs(this.deltaX) < Math.abs(e.touches[0].pageY - this.start.pageY));
      }
      if (this.isScrolling) {
        return;
      }
      e.preventDefault();
      clearTimeout(this.interval);
      condition = !this.index && this.deltaX > 0 || this.index === this.$slides.length - 1 && this.deltaX < 0;
      div = condition ? Math.abs(this.deltaX) / this.width + 1 : 1;
      this.deltaX = this.deltaX / div;
      return this.$el.setTranslateX(this.deltaX + this.translation);
    };

    Swiper.prototype._onTouchEnd = function(e) {
      var direction, isPastBounds, isValidSlide, val;
      e = e.originalEvent;
      isValidSlide = Number(new Date()) - this.start.time < 250 && Math.abs(this.deltaX) > 20 || Math.abs(this.deltaX) > this.width / 2;
      isPastBounds = !this.index && this.deltaX > 0 || this.index === this.$slides.length - 1 && this.deltaX < 0;
      if (!this.isScrolling) {
        direction = this.deltaX < 0 ? 1 : -1;
        val = isValidSlide && !isPastBounds ? direction : 0;
        this.slide(this.index + val, this.options.speed);
      }
      return e.stopPropagation();
    };

    Swiper.prototype.prev = function(delay) {
      this.delay = delay || 0;
      clearTimeout(this.interval);
      if (this.index) {
        return this.slide(this.index - 1, this.options.speed);
      }
    };

    Swiper.prototype.next = function(delay) {
      this.delay = delay || 0;
      clearTimeout(this.interval);
      if (this.index < this.$slides.length - 1) {
        return this.slide(this.index + 1, this.options.speed);
      } else {
        return this.slide(0, this.options.speed);
      }
    };

    Swiper.prototype.stop = function() {
      this.delay = 0;
      return clearTimeout(this.interval);
    };

    Swiper.prototype.resume = function() {
      this.delay = this.options.auto || 0;
      return this._start();
    };

    Swiper.prototype.goto = function(index) {
      return this.slide(index);
    };

    Swiper.prototype.position = function(to) {
      if (to != null) {
        return this.goto(to);
      } else {
        return this.index;
      }
    };

    return Swiper;

  })();
  return $.fn.swiper = function(options) {
    var args, r;
    args = Array.prototype.slice.call(arguments, 1);
    r = [];
    this.each(function() {
      var $el, plugin;
      $el = $(this);
      if (typeof options === 'string') {
        plugin = $el.data('swiper');
        return r.push(plugin[options].apply(plugin, args));
      } else if (!$el.data('swiper')) {
        return $el.data('swiper', new Swiper(this, options));
      }
    });
    if (r.length === 1) {
      return r[0];
    } else if (r.length) {
      return r;
    } else {
      return this;
    }
  };
})(jQuery, window);
